Just a scratch file for thinking with a keyboard...

* Machine
    - Display
    - Balance
    - Inventory
        - Product, Quantity
    - Bank
        - Currencies
    - Coin Return
        - Coins

* Coin
    - Weight
    - Size

* Machine operations
    - Check display?
    - Insert coin
    - Coin return
    - Vend product

--

machine(display, balance, inventory, bank, coin_return) -> machine
check_display(machine) -> machine
insert_coin(machine, coin) -> machine
return_coins(machine) -> machine
vend(machine, product) -> machine

inventory(stock...) -> inventory
stock(product, quantity) -> stock
product(name, price) -> product
coin_return(coin) -> coin_return
coin(weight, size) -> coin
currency(type, value) -> currency

bank(currency...) -> bank
update_bank(bank, currency) -> bank

--

"Coin" is a separate concept from Currency.
Need some kind of fake classification for coins.  Here we go:
Coin size and weight:
    Nickel  Medium  Heavy
    Dime    Small   Light
    Quarter Large   Heavy

--

"Balance" is a separate bank object.  Once any transaction has happened on the
balance, the balance gets committed to the machine bank and any coin return
will pull from the machine bank instead of the balance.

In fact, a "Bank" object can hold any arbitrary combination of nickels, dimes,
and quarters.

...In fact, a "Bank" can hold any amount of any currency.

So we'll have two separate banks.  One for the customer, one for the machine.

--

Though completely covered, Currency and Machine have reasonably high cyclomatic
complexity.  See if we can reduce this.

It would probably be better to use a bidirectional map from Guava for the
coin/currency mapping.  Refactor this?  For now, tie each coin property pair
to its enum.

--

This is a problem.  The display has to change state when "checked."  Check has
to be a separate operation.

--

Eventually pull the big logic blocks out of Machine into behavior classes.
Pull out balance calculation code into another class.

Jacoco caught me adding stuff I wasn't using yet, which I then built a bunch of
complexity around before I had simple tests for the smaller things.  At least
I'm not afraid of throwing things away.  This has been cleaned up for now.

--

The coin return can just be a Bank too.  Banks now invariably create maps of
currency to quantity with zeroes filled in for each currency in the Currency
enum.  It does this in the constructor.

Things are now dramatically cleaner.

--

Bank "change" making and withdrawal (subset functionality) is a clear a source
of complexity.  This is because my data structures are probably a little janky
for what I'm trying to do.  I don't want to pull in Guava just for this little
project though, so I'm going to keep moving and refactor later.

--

There's a lot of implicit math and value-knowing in the Machine tests.  Try to
reduce this.

Bank needs withdraw tests beyond coverage from other test classes.

Need more defensive checking of parameters.  Null checks.

checkDisplay is not explicit enough and has a 5 cyclomatic complexity.

--

Bank now wraps a generic enum inventory class that can also be used for
products.  Product inventory should theoretically be easy to implement now.

--

We are now functionally complete with 100% test coverage.  Now to do:

* Clean up javadoc
x Git rid of wrapped primitives
* Write more thorough tests, check null values for explosions
* Make machine tests less implicit / mapped to kata doc
* Use the gradle application plugin and write a looped driver for play
