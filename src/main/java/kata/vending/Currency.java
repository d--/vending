package kata.vending;import java.util.Arrays;import java.util.Collections;import java.util.Comparator;import java.util.SortedSet;import java.util.TreeSet;/** * Represents the various types of currency and contains coin conversion logic. */public enum Currency {    /** Nickel. */    NICKEL (5L, new Coin(Coin.Size.MEDIUM, Coin.Weight.HEAVY)),    /** Dime. */    DIME (10L, new Coin(Coin.Size.SMALL, Coin.Weight.LIGHT)),    /** Quarter. */    QUARTER (25L, new Coin(Coin.Size.LARGE, Coin.Weight.HEAVY)),    /**     * Any other type of coin or currency that we aren't aware of.     */    UNKNOWN (0L, null);    /**     * The number of cents that this currency represents.     */    private final Long cents;    public Long getCents() {        return cents;    }    /**     * The coin that represents the currency.     */    private final Coin coin;    public Coin getCoin() {        return coin;    }    /**     * Currency enum constructor.     * @param cents number of cents of the currency     * @param coin the coin that the currency is represented by     */    Currency(final Long cents, final Coin coin) {        this.cents = cents;        this.coin = coin;    }    /**     * Classifies a coin of some size and weight as the appropriate currency.     * @param coin coin to assess     * @return the appropriate currency classification for the coin     */    public static Currency toCurrency(final Coin coin) {        for (final Currency currency : Currency.values()) {            if (coin == currency.coin) {                return currency;            }        }        return UNKNOWN;    }    /**     * Creates a sorted set of all known currencies descending in cents value.     * @return a sorted set of all known currencies descending in cents value     */    public static SortedSet<Currency> descending() {        final SortedSet<Currency> sorted =            new TreeSet<>(new Comparator<Currency>() {                @Override                public int compare(final Currency a, final Currency b) {                    return b.getCents().compareTo(a.getCents());                }            });        sorted.addAll(Arrays.asList(Currency.values()));        sorted.remove(Currency.UNKNOWN);        return Collections.unmodifiableSortedSet(sorted);    }}